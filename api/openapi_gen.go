// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// User defines model for User.
type User struct {
	// Biography Интересы
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate *BirthDate `json:"birthdate,omitempty"`

	// City Город
	City *string `json:"city,omitempty"`

	// FirstName Имя
	FirstName *string `json:"first_name,omitempty"`

	// Id Идентификатор пользователя
	Id *UserId `json:"id,omitempty"`

	// SecondName Фамилия
	SecondName *string `json:"second_name,omitempty"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       *UserId `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate  *BirthDate `json:"birthdate,omitempty"`
	City       *string    `json:"city,omitempty"`
	FirstName  *string    `json:"first_name,omitempty"`
	Password   *string    `json:"password,omitempty"`
	SecondName *string    `json:"second_name,omitempty"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (GET /user/get/{id})
	GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId)

	// (POST /user/register)
	PostUserRegister(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /user/get/{id})
func (_ Unimplemented) GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /user/register)
func (_ Unimplemented) PostUserRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/get/{id}", wrapper.GetUserGetId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/register", wrapper.PostUserRegister)
	})

	return r
}

type N5xxResponseHeaders struct {
	RetryAfter int
}
type N5xxJSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}

	Headers N5xxResponseHeaders
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogin404Response struct {
}

func (response PostLogin404Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostLogin500JSONResponse struct{ N5xxJSONResponse }

func (response PostLogin500JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLogin503ResponseHeaders struct {
	RetryAfter int
}

type PostLogin503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostLogin503ResponseHeaders
}

func (response PostLogin503JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserGetIdRequestObject struct {
	Id UserId `json:"id"`
}

type GetUserGetIdResponseObject interface {
	VisitGetUserGetIdResponse(w http.ResponseWriter) error
}

type GetUserGetId200JSONResponse User

func (response GetUserGetId200JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserGetId400Response struct {
}

func (response GetUserGetId400Response) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserGetId404Response struct {
}

func (response GetUserGetId404Response) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserGetId500JSONResponse struct{ N5xxJSONResponse }

func (response GetUserGetId500JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserGetId503ResponseHeaders struct {
	RetryAfter int
}

type GetUserGetId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetUserGetId503ResponseHeaders
}

func (response GetUserGetId503JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserRegisterRequestObject struct {
	Body *PostUserRegisterJSONRequestBody
}

type PostUserRegisterResponseObject interface {
	VisitPostUserRegisterResponse(w http.ResponseWriter) error
}

type PostUserRegister200JSONResponse struct {
	UserId *string `json:"user_id,omitempty"`
}

func (response PostUserRegister200JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserRegister400Response struct {
}

func (response PostUserRegister400Response) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUserRegister500JSONResponse struct{ N5xxJSONResponse }

func (response PostUserRegister500JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserRegister503ResponseHeaders struct {
	RetryAfter int
}

type PostUserRegister503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostUserRegister503ResponseHeaders
}

func (response PostUserRegister503JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)

	// (GET /user/get/{id})
	GetUserGetId(ctx context.Context, request GetUserGetIdRequestObject) (GetUserGetIdResponseObject, error)

	// (POST /user/register)
	PostUserRegister(ctx context.Context, request PostUserRegisterRequestObject) (PostUserRegisterResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserGetId operation middleware
func (sh *strictHandler) GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId) {
	var request GetUserGetIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserGetId(ctx, request.(GetUserGetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserGetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserGetIdResponseObject); ok {
		if err := validResponse.VisitGetUserGetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserRegister operation middleware
func (sh *strictHandler) PostUserRegister(w http.ResponseWriter, r *http.Request) {
	var request PostUserRegisterRequestObject

	var body PostUserRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserRegister(ctx, request.(PostUserRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserRegisterResponseObject); ok {
		if err := validResponse.VisitPostUserRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RX30/bVhT+V6y7PTo/CNBVeaOa1CFN2tSuT1VVGfsmcUds7/qygVAkEraOCiSqbQ/T",
	"tK2bur0bFheTH+ZfOPc/ms6xE+LEaUOh7Qtg+/445zvf953DLjPdpuc63JE+q+4ywX3PdXxOD6vb2/jL",
	"dB3JHYl/Gp63aZuGtF2n9MR3HXznmw3eNPAvT7geF9JOdpuuxfG3xX1T2B7uYVUGv0EMXQ1idQARnEAP",
	"oqIGL9QehNCFIQRwhj/VjxDCUIMu9NWxBj3oQ6Daqg2R+h4i6EGgnkIEkQYXag9iOIE+hDDQ8M0JxPQU",
	"anCiDlVbdWjJfxBreI06wKMhwnMzm4tMZ3LH46zKbEfyOhespbMm932jnpfJn3ABkWpDgKfhbRM5XR7l",
	"S2E7dTxJ8G+2uC8f21bOYb9CF8NSnYkMOxCrPQ3OIEgCxbsWAOs1+cMFxBRzD4L52Y9CTmO2BbdY9eEY",
	"iUfjhe7GE25K1sKV0+CMsQg01YZQ7cEp/QyYzhrcsLggltzjUuwU1mqSixxUfqJUB+pY1zBJejpDOsQJ",
	"OBBjlqF6BiHWNsCPQ7UPr2CI1W4TqEidjjrKAMn0Cd5OF71FCSXfKcg7tpCNTw2Zx4JfqFCBRsG8SqqI",
	"5GI649tG09vEoyvlpU8K5UqhvMR0VnNF05Csyiw8MYcoD/wEjKyeNmy3LgyvsZPLHmQO4aPa6jBzN/xL",
	"RT6BSNcgyi5EvahOES6KeXFsYNpWmvbHgtdYlX1UujSMUgpR6RKfls5MW+aF+HNar242uN+J1j04JWLM",
	"hFCzhS8fO0aT52Y9mMJ5/GrmoER0r0sCUV+3cK3PTdex5t36DwQwgAj6M1We+TSrpynhJLVev6IhoIj7",
	"6gjOIEbcsKCo/NwLfW5uCVvu3McsUyJxQ3CxtiUbOdc+h9NUWhHqBV2WjBLl1IEYehTUvj4hQnUI52Q1",
	"0B/Ftj+ypFMNBhDSzi6EWmnTrdvOSHwYahLMZegNKb3EUGyn5pI6bUnofvHVg/vaZ3a9sekalrYmzIYt",
	"EUSdfcuFn4S/VKwUywir63HH8GxWZcvFcrHMdOYZskHppzGgvlxf5kDwMjWJZyTlYZJe8uopyaatQaD2",
	"CfZsfcYtKfk4QDjC1K3RpSMU4FXLSj0tAyuV5LIaaOWp9XchoCOGEMI5NbrE9Sn4H7IGpUEwW2vqXOg6",
	"1OORmOxL15efp2VLW9gd19q5xmRwFS16hu9/5wraMaG0vyGEHrlYhzrgsTbuc708J2nl9CxqbxPjTqVc",
	"vkZS0v2aO9ko+YpV4bc2ygXT4pXCSsVcLRiGuVwob9xeXrpVqyzx1duLhTrTXl+qNnHrIM1+PiHVMcK4",
	"kuQ2dcofECLT0K9wnlCH2E27NNDQQ7JzJWfni1yuHmnIPI0mk/OEaXjEanJ5XsHHBSjhsElrlxdcS7CU",
	"tnwuSnUuS7u21cKddS7nxjvWDwaJWfaQQNgG51tqVgx3uURu3uVy3SJTEUaTS5plHt6MhaM1kVkxnSUd",
	"CPUyOYlJscUnx5dFhNR6dE2yv+mSN7KUJrWLtyzDO2Dw89G9aJ/TrIXgvfBW8Lrtp5PvnGb0F3l4lLrb",
	"uB8PCaCJoX4R8qKTY63uja69KUPPjKYffvJ82/FykTnyhvrRzJB5nSnyplsZcjP9L/WDNDOamGZIfz0T",
	"eGdabrX+DwAA//9j1nCiRBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
